// hello:
export "/hello" "Hello, world!"

// pass through:
export "/original" query("https://api.example.org")

// empty, returns {} (equals, and semicolons are optional):
export "/empty" = define()

// local, reusable definition (commas are optional if there are newlines between the args):
let constants = define(
	const("foo", "blah")
	const("bar", 42)
	const("baz", 3.14)
)

export "constants" constants

// only the defined fields are returned by default plus the ID if exists:
export "enriched-constants" extend(
	constants
	query("https://api.example.org")
	string("foo")
)

// various mappings are possible, plus custom ones:
let mapping1 map.renameField("foo", "bar");
let mapping2 map.renameField("bar", "baz");

// the backend returns {"foo": "blah"}
// the query maps it to {"bar": "blah"}
// the definition maps it to {"baz": "blah"}
export "/foo-bar-baz" define(
	query("https://api.example.org", mapping1)
	string("bar")
	mapping2

	// we don't need this here, just demoing comments:
	/* int("qux") */
)

// all kinds of relations are possible. It must be a tree, but the backend queries are parallelized and
// deduplicated.
// backend URLs: custom connectors are allowed, but by default, string urls are just automatically wrapped with a
// default http connector.
export "/authenticated-user" define(
	query("https://auth.example.org/info")
	query(authConnector.extended)

	string("name")
	int("level")
	float("iris-radius-when-seen-this")

	containsMany("roles", by("id"), define(
		query("https://auth.example.org/roles")
		string("role")
		map.flat("role")
	))
)

// selected fields from one query, all fields from the other
export "mixed" define(
	contains("one", define(
		query(structOne)
		string("foo")
	))
	contains("other", query(otherStruct))
	map.flat
)

let customDefine define(response.errMissingField)

export "foo" customDefine(
	string("foo")
	query(foo)
)

export "bar" customDefine(
	string("bar")
	query(bar)
)

export "curry" define("foo")("bar")("baz")
